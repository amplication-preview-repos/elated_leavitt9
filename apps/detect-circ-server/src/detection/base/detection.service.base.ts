/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Detection as PrismaDetection,
  Image as PrismaImage,
} from "@prisma/client";

export class DetectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detection.count(args);
  }

  async detections(
    args: Prisma.DetectionFindManyArgs
  ): Promise<PrismaDetection[]> {
    return this.prisma.detection.findMany(args);
  }
  async detection(
    args: Prisma.DetectionFindUniqueArgs
  ): Promise<PrismaDetection | null> {
    return this.prisma.detection.findUnique(args);
  }
  async createDetection(
    args: Prisma.DetectionCreateArgs
  ): Promise<PrismaDetection> {
    return this.prisma.detection.create(args);
  }
  async updateDetection(
    args: Prisma.DetectionUpdateArgs
  ): Promise<PrismaDetection> {
    return this.prisma.detection.update(args);
  }
  async deleteDetection(
    args: Prisma.DetectionDeleteArgs
  ): Promise<PrismaDetection> {
    return this.prisma.detection.delete(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.detection
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }
}
