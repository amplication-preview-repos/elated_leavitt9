/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Detection } from "./Detection";
import { DetectionCountArgs } from "./DetectionCountArgs";
import { DetectionFindManyArgs } from "./DetectionFindManyArgs";
import { DetectionFindUniqueArgs } from "./DetectionFindUniqueArgs";
import { CreateDetectionArgs } from "./CreateDetectionArgs";
import { UpdateDetectionArgs } from "./UpdateDetectionArgs";
import { DeleteDetectionArgs } from "./DeleteDetectionArgs";
import { Image } from "../../image/base/Image";
import { DetectionService } from "../detection.service";
@graphql.Resolver(() => Detection)
export class DetectionResolverBase {
  constructor(protected readonly service: DetectionService) {}

  async _detectionsMeta(
    @graphql.Args() args: DetectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Detection])
  async detections(
    @graphql.Args() args: DetectionFindManyArgs
  ): Promise<Detection[]> {
    return this.service.detections(args);
  }

  @graphql.Query(() => Detection, { nullable: true })
  async detection(
    @graphql.Args() args: DetectionFindUniqueArgs
  ): Promise<Detection | null> {
    const result = await this.service.detection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Detection)
  async createDetection(
    @graphql.Args() args: CreateDetectionArgs
  ): Promise<Detection> {
    return await this.service.createDetection({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Detection)
  async updateDetection(
    @graphql.Args() args: UpdateDetectionArgs
  ): Promise<Detection | null> {
    try {
      return await this.service.updateDetection({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Detection)
  async deleteDetection(
    @graphql.Args() args: DeleteDetectionArgs
  ): Promise<Detection | null> {
    try {
      return await this.service.deleteDetection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Image, {
    nullable: true,
    name: "image",
  })
  async getImage(@graphql.Parent() parent: Detection): Promise<Image | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
